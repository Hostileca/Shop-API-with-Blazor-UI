@page "/categories/{categoryId}"
@rendermode InteractiveServer

<div class="container mt-5">
    @if (CategoryModel != null)
    {
        @switch (Mode)
        {
            case Modes.Read:
                <CategoryReadMode CategoryModel="CategoryModel"></CategoryReadMode>
                break;
            case Modes.Edit:
                <CategoryEditMode CategoryModel="CategoryModel"></CategoryEditMode>
                break;
            default:
                break;
        }

        @if (UserService.IsTokenHasRole(Roles.root))
        {
            <div class="mt-4">
                <button class="btn btn-primary" onclick="@(() => SwitchMode())">@GetNextMode()</button>
                <button class="btn btn-danger" onclick="@(() => RemoveCategory())">Delete category</button>
            </div>
        }
    }
    else
    {

    }
</div>

@code {
    [Parameter]
    public string categoryId { get; set; }
    private Modes Mode = Modes.Read;

    public CategoryDetailedReadDto CategoryModel { get; set; }
    protected override async Task OnInitializedAsync()
    {
        CategoryModel = await UserService.HttpClient.GetFromJsonAsync<CategoryDetailedReadDto>($"{UserService.APIConnectionString}/categories/{categoryId}");
    }

    private void SwitchMode()
    {
        switch (Mode)
        {
            case Modes.Read:
                Mode = Modes.Edit;
                break;
            case Modes.Edit:
                Mode = Modes.Read;
                break;
            default:
                break;
        }
    }

    private Modes GetNextMode()
    {
        switch (Mode)
        {
            case Modes.Read:
                return Modes.Edit;
            case Modes.Edit:
                return Modes.Read;
        }
        return Modes.Read;
    }

    private async Task RemoveCategory()
    {
        var response = await UserService.HttpClient.DeleteAsync($"{UserService.APIConnectionString}/categories/{CategoryModel.Id}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/categories");
        }
        await MessageService.ShowMessage(response);
    }
}
