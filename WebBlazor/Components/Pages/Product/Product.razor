@page "/products/{productId}"
@rendermode InteractiveServer

<div class="container mt-5">
    @if (ProductModel != null)
    {
        @switch (ProductMode)
        {
            case Modes.Read:
                <ProductReadMode ProductModel="ProductModel"></ProductReadMode>
                break;
            case Modes.Edit:
                <ProductEditMode ProductModel="ProductModel"></ProductEditMode>
                break;
            default:
                break;
        }

        @if (UserService.IsTokenHasRole(Roles.root))
        {
            <div class="mt-4">
                <button class="btn btn-primary" onclick="@(() => SwitchMode())">@GetNextMode()</button>
                <button class="btn btn-danger" onclick="@(() => RemoveProduct())">Delete product</button>
            </div>
        }
    }
    else
    {

    }
</div>

@code {
    [Parameter]
    public string productId { get; set; }
    private Modes ProductMode = Modes.Read;

    public ProductDetailedReadDto ProductModel { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ProductModel = await UserService.HttpClient.GetFromJsonAsync<ProductDetailedReadDto>($"{UserService.APIConnectionString}/products/{productId}");
    }

    private void SwitchMode()
    {
        switch (ProductMode)
        {
            case Modes.Read:
                ProductMode = Modes.Edit;
                break;
            case Modes.Edit:
                ProductMode = Modes.Read;
                break;
            default:
                ProductMode = Modes.Read;
                break;
        }
    }

    private Modes GetNextMode()
    {
        switch (ProductMode)
        {
            case Modes.Read:
                return Modes.Edit;
            case Modes.Edit:
                return Modes.Read;
        }
        return Modes.Read;
    }

    private async Task RemoveProduct()
    {
        var response = await UserService.HttpClient.DeleteAsync($"{UserService.APIConnectionString}/products/{ProductModel.Id}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/products");
        }
        await MessageService.ShowMessage(response);
    }
}
